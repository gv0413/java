import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class Client3 {
	public static void main(String[] args) {
		new Zelda();
	}
}

class ImageService{
	public static final String[] standingImageName= {"f.png"};
	public static final String[] walkingLeftImageName= {"l_1.png", "l_2.png", "l_3.png", "l_4.png", "l_5.png", "l_6.png", "l_7.png", "l_8.png", "l_9.png", "l_10.png"};
	public static final String[] walkingRightImageName= {"r_1.png", "r_2.png", "r_3.png", "r_4.png", "r_5.png", "r_6.png", "r_7.png", "r_8.png", "r_9.png", "r_10.png"};

}
class PositionService{
	public static final int[] standingPosition= {0};
	public static final int[] walkingLeftPosition= {0,-10,-20,-30,-40,-50,-60,-70,-80,-90};
	public static final int[] walkingRightPosition= {0,10,20,30,40,50,60,70,80,90};

}

abstract class MovingStrategy{
	abstract public String[] getImages();
	abstract public int[] getPositions();
}

class StandingStrategy extends MovingStrategy{
	public String[] getImages() {
		return ImageService.standingImageName;
	}
	public int[] getPositions() {
		return PositionService.standingPosition;
	}
}

class WalkingLeftStrategy extends MovingStrategy{
	public String[] getImages() {
		return ImageService.walkingLeftImageName;
	}
	public int[] getPositions() {
		return PositionService.walkingLeftPosition;
	}
}

class WalkingRightStrategy extends MovingStrategy{
	public String[] getImages() {
		return ImageService.walkingRightImageName;
	}
	public int[] getPositions() {
		return PositionService.walkingRightPosition;
	}
}



class Zelda extends JFrame{
	private static final long serialVersionUID = 1L;
	private Field field;
	private Controller controller;
	private MovingStrategy strategy = new StandingStrategy();
	
	public Zelda() {
		super("Zelda");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		
		field = new Field();
		controller = new Controller();
		
		add(field, BorderLayout.CENTER);
		add(controller, BorderLayout.SOUTH);
		
		setSize(400, 400);
		setVisible(true);
		
		Thread th = new Thread(field);
		th.start();
	}
	
	private class Field extends JPanel implements Runnable{
		private static final long serialVersionUID = 1L;
		private JLabel lbl;
		
		public Field() {
			setLayout(new BorderLayout());
			lbl = new JLabel();
			lbl.setIcon(new ImageIcon("./src/img/"+strategy.getImages()[0]));
//			lbl.setBounds(4,4,340,330);
			add(lbl, BorderLayout.CENTER);
		}
		public void run() {
			int imageIndex = 0;
			while (true) {
				String[] path = strategy.getImages();
				
				if(path.length <= imageIndex) {
					imageIndex = 0;
				}
				lbl.setIcon(new ImageIcon("./src/img/"+path[imageIndex]));
				lbl.setLocation(imageIndex,0);
				imageIndex++;
				try {
					Thread.sleep(100);
				}catch(InterruptedException e) {
					System.out.println(e.getMessage());
				}
			}
		}
	}
	
	private class Controller extends JPanel implements ActionListener{
		private JButton btnStanding, btnWalkingLeft, btnWalkingRight;
		
		public Controller() {
			setLayout(new FlowLayout());
			btnStanding = new JButton("Standing");
			btnWalkingLeft = new JButton("WalkingLeft");
			btnWalkingRight = new JButton("WalkingRight");
			
			btnStanding.addActionListener(this);
			btnWalkingLeft.addActionListener(this);
			btnWalkingRight.addActionListener(this);
			
			add(btnStanding);
			add(btnWalkingLeft);
			add(btnWalkingRight);
		}
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			JButton btn = (JButton) e.getSource();
			if(btn == btnStanding) {
				strategy = new StandingStrategy();
			}else if(btn == btnWalkingLeft) {
				strategy = new WalkingLeftStrategy();
			}else if (btn ==btnWalkingRight) {
				strategy = new WalkingRightStrategy();
			}
		}
		
	}
}